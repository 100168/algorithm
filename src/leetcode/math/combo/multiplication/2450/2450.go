package main

import "fmt"

/*
*
给定一个 二进制 字符串 s 和一个正整数 k。

你可以对字符串应用以下操作 任意 次数:

从 s 中选择任何大小为 k 的子字符串，将其所有字符 翻转，即将所有 1 都变成 0，所有 0 都变成 1。
返回您可以获得的 不同 字符串的数量。因为答案可能太大，所以对 109 + 7 取模 后返回。

注意:

二进制字符串是 仅由 字符 0 和 1 组成的字符串。
子字符串是字符串的连续部分。

输入: s = "1001", k = 3
输出: 4
解释: 我们可以获得以下字符串:
- 对字符串不应用任何操作将得到 s = "1001"。
- 对从下标 0 开始的子字符串应用一个操作，得到 s = "0111"。
- 对从下标 1 开始的子字符串应用一个操作，得到 s = "1110"。
- 对从下标 0 和 1 开始的两个子字符串都应用一个操作，得到 s = "0000"。
可以证明，我们不能获得任何其他字符串，所以答案是 4。
*/
func countDistinctStrings(s string, k int) int {

	mod := int(1e9 + 7)
	n := len(s) - k + 1
	p := 2

	ans := 1
	for n > 0 {
		if n&1 != 0 {
			ans = ans * p % mod
		}
		n >>= 1
		p = p * p % mod
	}

	return ans
}

func main() {
	fmt.Println(countDistinctStrings("1001", 3))
}
