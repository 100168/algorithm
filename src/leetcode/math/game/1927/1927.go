package main

import "fmt"

/**
Alice 和 Bob 玩一个游戏，两人轮流行动，Alice 先手 。

给你一个 偶数长度 的字符串 num ，每一个字符为数字字符或者 '?' 。
每一次操作中，如果 num 中至少有一个 '?' ，那么玩家可以执行以下操作：

选择一个下标 i 满足 num[i] == '?' 。
将 num[i] 用 '0' 到 '9' 之间的一个数字字符替代。
当 num 中没有 '?' 时，游戏结束。

Bob 获胜的条件是 num 中前一半数字的和 等于 后一半数字的和。Alice 获胜的条件是前一半的和与后一半的和 不相等 。

比方说，游戏结束时 num = "243801" ，那么 Bob 获胜，因为 2+4+3 = 8+0+1 。如果游戏结束时 num = "243803" ，
那么 Alice 获胜，因为 2+4+3 != 8+0+3 。
在 Alice 和 Bob 都采取 最优 策略的前提下，如果 Alice 获胜，请返回 true ，如果 Bob 获胜，请返回 false 。


输入：num = "?3295???"
输出：false
解释：Bob 总是能赢。一种可能的结果是：
- Alice 将第一个 '?' 用 '9' 替换。num = "9329 5???" 。
- Bob 将后面一半中的一个 '?' 替换为 '9' 。num = "9329 59??" 。
- Alice 将后面一半中的一个 '?' 替换为 '2' 。num = "9329 592?" 。
- Bob 将后面一半中最后一个 '?' 替换为 '7' 。num = "9329 5927" 。
Bob 获胜，因为 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7 。

思路:左右两边问号可以抵消，最后只考虑抵消后剩下的问号  t = l-r，diff = lsum-rsum  然后分类讨论
1.如果t是奇数直接返回true
2.如果t>0 说明左边问号多，如果 diff >0 直接返回true  否则如果diff不是9的倍数直接返回true
3.如果t<0 说明右边问号多，如果 diff <0 直接返回true  否则如果diff不是9的倍数直接返回true


*/

func sumGame(num string) bool {

	n := len(num)

	s1 := 0
	s2 := 0

	left := 0
	right := 0
	for i := range num {
		if num[i] >= '0' && num[i] <= '9' {
			if i < n/2 {
				s1 += int(num[i] - '0')
			} else {
				s2 += int(num[i] - '0')
			}

		} else {
			if i < n/2 {
				left++
			} else {
				right++
			}
		}
	}
	diff := s1 - s2

	if left+right == 0 {
		return diff != 0
	}

	return check(left-right, diff)
	//

}

// bob diff ==0  alice diff!=0
func check(l, diff int) bool {

	if l%2 != 0 {
		return true
	}
	//分类讨论有bug
	if l > 0 {
		if diff > 0 {
			return true
		}

		// 0 - l/2*9
		if -diff < (l/2)*9 || (l/2)*9 < (-diff) {
			return true
		}
		return false
	}
	l = -l

	if diff < 0 {
		return true
	}

	//右边
	if diff < (l/2)*9 || diff > (l/2)*9 {
		return true
	}

	return false
}

func main() {
	fmt.Println(sumGame("?3295???"))
	fmt.Println(1 << 20)
	//fmt.Println(sumGame("25??"))
	//fmt.Println(sumGame("316471?313283685?85?795994265179??39?810316?22299392823141??55?133407106945635129294261166908??2628??76?96?8?7109??7??73??0457?37254250?6640??057790019563156??888669?302?01?649790?0?185?24117037?356393?788666?28??208???368647706534995?33759?947146?71974395161686?038?13192?2?439?68940843?813386154032064225?491257?52533758?224?57467971991752419?369235776697544?38759??99731397015739347??5861?44657?5???550597860?432??74749177?159034610?6079076997625125397337?59002?8?1??1?04?94?436?761830368?022391?8612???4?2198296745??5411537?02389?648742?18???412230?867007136?5776?7?48601633?46971965?040732171181?8?604?5?9?220??6085823?8?4?167?1449?1241?3?95990?91773580426568?93?6486706357?7?3??977508897?8504?0954610967467?92?9?8430865069?1?28077973923721031?92?623????2?9?4009365??762425?0648473184?520362576880?32?3715639?7827?4?96?19410???80050?7522?155147206251294230843?982?386159???7451710977?9?12125????74398?185137427712836?2983297?724?3477?6754?0?9384?760901536?26??4239?9412312?44590823?944??8?9675?0??27?50??990464283502?672659?33605?22737??1??7?5??2?42?708323?010???17557902?5419?52308930391755763?26?66?86?20654?5886713?000041328819?41386758600668?7?07?2842?3608?8?679915937479686587146553387?20?863?7336812147?1?0?4504009377?8266?333094?243719646?93192?2502??2?06721801201601??2847083126544?2?8?86?3315310?611366078192627831311?81101??1947869074730?4652?59043?49979??1?91?400??73856?00956230407874684410?10717?543?71116092445973??465??10??3099?631737?4282?563267439?76005137212099?44387157332169?5?00200116693491?308??49062??0417?569??82?6?8471?2?4638?91743??13?22729?9992?264838814??608571596?892924326?63??810?5997?9?5959?7113736?661?82??006?8?28?7??08323582?7?1782712935255050144??2?0?02??0?33235?19?016?69843?44166470450574?6?0215599635?5????08373446?3511256?7820?780?4807812?355259779139347241685905??3?860371?993761?992163?78259614?73903999474179?2537964?938979558?58683037763078?9????50??99252?25??3547?93???71659?550?014345462831?0571???35465?45552367793??6?9408??9292??9501960520?34067?6?8???12620372?08??37204878226???02904685?70667?5?7?84780045701?8924?89?2147031656836491?93225?461994071061271703?8597?601007180?5247??2127977369422924613453?9?697868514089814983820740983?5?29118146953?39137?80??4?92542889?448764?3187?412505?279878754871?09?309259?6?91?849?51582??76985?62?4??3216?4531?308?70655886?64828?228609694?8?40233?872??366276?82270??8737023?57?6???705?89323??5020?5483701681947?660447????1?858702?494?470931?3?81?76?3?6951813?4?60?7?7556595559553211848?5?2278?619?474232643820?3?2423304285?7590742??408133873?92662321?21?1?19828081642?99023?637??60113998451???34501860727??6?638150?9367094963???07509106????368488?2?507??5284531638??78?7?9???04?454687131?6?75?761548145213166163182054528?83743449603192?2?6727?8?5979?09601343883702991254694?76?5?01134952?133?4910771?471?4444??5?3?27691?254718280917161641939527?82?787081?3?1?88??79960?6335148?03000?8869??79389?786?6045527518?1979035??229?3?427??9703182?771?8?905?63??6??2?5232?2?9?0??084??0?03???83462707?181660454?58?9?45??3689?28?0?798??53?95650?06807?77496??990?5?26??5934?6?9990?956637830?0?36??63???843161194867??479?89470031480536943?7029561387188?4?5989?020??8949?33465?250?7083496093677911??5365610459???26035025300251186999355113678778423?5791?3??392?903178524061?236567216112?9??2589?6??498906984021?30148468910365456986?4693897244?0976?34699314267650?2716260?9269715270?52?222?2605991255?5?33850932???01?434488?378?0?18??39880922586?5742388??242?3178?00?538?7?46668?8481?73389?5?204431645?9474??9713??926710?3495568876259?936?240??2???587434384747365072?2229?6287?4?3?499?6645?2?4?891861?20387434169554?9?9?3357?66779?81?1415?0827???971011?1404??49?491814949530797?7?912?24??569257573?715973?065886057?874??4723?66948699753752037?0495?40?587033?59??1?940033456??0125376??64463??394529112671568977?3?6437483020?08577822?1?1??75943?675090504773488?387?5042200?78?4?68944899?3?765?905??2963?9??6437950?3?1?5?804??8?62419?587?577?8?531122?24?5825685938994865489582443065535802?74775242?7?9?99005989716??572530?64042?26341?10558?595263?760909064?7575?99??80368880053113?2403??6?92388?89?47176?28?8226724073?96?988749?6746393564??4298696812?2??67??33?801?6458?456758805274933?0645?4?028775?3118061??8013??863?94???168105??14"))
}
