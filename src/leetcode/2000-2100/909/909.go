package main

import (
	"fmt"
)

/*
*

给你一个大小为 n x n 的整数矩阵 board ，方格按从 1 到 n2 编号，编号遵循 转行交替方式 ，
从左下角开始 （即，从 board[n - 1][0] 开始）每一行交替方向。

玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。

每一回合，玩家需要从当前方格 curr 开始出发，按下述要求前进：

选定目标方格 next ，目标方格的编号符合范围 [curr + 1, min(curr + 6, n2)] 。
该选择模拟了掷 六面体骰子 的情景，无论棋盘大小如何，玩家最多只能有 6 个目的地。
传送玩家：如果目标方格 next 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 next 。
当玩家到达编号 n2 的方格时，游戏结束。
r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；
如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。编号为 1 和 n2 的方格上没有蛇或梯子。

注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，玩家也 不能 继续移动。

举个例子，假设棋盘是 [[-1,4],[-1,3]] ，第一次移动，玩家的目标方格是 2 。
那么这个玩家将会顺着梯子到达方格 3 ，但 不能 顺着方格 3 上的梯子前往方格 4 。
返回达到编号为 n2 的方格所需的最少移动次数，如果不可能，则返回 -1。
*/
func snakesAndLadders(board [][]int) int {

	n := len(board)

	end := n*n - 1
	f := make([]int, n*n)

	for i := range f {
		f[i] = -1

	}

	convertToIndex := func(i int) (int, int) {
		r := i / n
		c := i % n
		if r%2 != 0 {
			c = n - c - 1
		}
		return n - 1 - r, c
	}

	st := []int{0}

	visited := make([]bool, n*n)
	visited[0] = true
	ans := 0
	for len(st) > 0 {
		temp := st
		st = nil
		for _, cur := range temp {
			if cur == end {
				return ans
			}
			for i := cur + 1; i <= min(cur+6, end); i++ {
				if !visited[i] {
					x, y := convertToIndex(i)
					visited[i] = true
					if board[x][y] != -1 {
						st = append(st, board[x][y]-1)
					} else {
						st = append(st, i)
					}
				}
			}
		}
		ans++
	}
	return -1
}

// {{-1,42,12,-1,1,-1,-1},
// {-1,-1,5,-1,-1,46,44},
// {18,22,6,39,-1,-1,-1},
// {-1,-1,40,-1,-1,-1,37},
// {49,38,24,-1,14,29,-1},
// {-1,-1,6,-1,-1,-1,20},
// {-1,-1,12,10,-1,5,26}}
func main() {
	fmt.Println(snakesAndLadders([][]int{{-1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1}, {-1, 35, -1, -1, 13, -1}, {-1, -1, -1, -1, -1, -1}, {-1, 15, -1, -1, -1, -1}}))
	fmt.Println(snakesAndLadders([][]int{{1, 1, -1}, {1, 1, 1}, {-1, 1, 1}}))
	fmt.Println(snakesAndLadders([][]int{{-1, -1, 2, -1}, {14, 2, 12, 3}, {4, 9, 1, 11}, {-1, 2, 1, 16}}))
	fmt.Println(snakesAndLadders([][]int{{-1, -1, 27, 13, -1, 25, -1}, {-1, -1, -1, -1, -1, -1, -1}, {44, -1, 8, -1, -1, 2, -1}, {-1, 30, -1, -1, -1, -1, -1}, {3, -1, 20, -1, 46, 6, -1}, {-1, -1, -1, -1, -1, -1, 29}, {-1, 29, 21, 33, -1, -1, -1}}))
	fmt.Println(snakesAndLadders([][]int{{-1, 42, 12, -1, 1, -1, -1}, {-1, -1, 5, -1, -1, 46, 44}, {18, 22, 6, 39, -1, -1, -1}, {-1, -1, 40, -1, -1, -1, 37}, {49, 38, 24, -1, 14, 29, -1}, {-1, -1, 6, -1, -1, -1, 20}, {-1, -1, 12, 10, -1, 5, 26}}))
	fmt.Println(snakesAndLadders([][]int{{-1, -1, -1, 63, -1, -1, -1, 62, -1}, {53, 52, 13, 32, -1, -1, -1, -1, -1}, {-1, -1, 26, -1, 73, -1, -1, -1, 55}, {-1, -1, -1, -1, 74, -1, -1, -1, -1}, {-1, -1, 35, 42, -1, 45, -1, -1, -1}, {81, -1, 3, 46, -1, -1, -1, -1, 59}, {74, -1, 66, 16, -1, -1, -1, -1, -1}, {-1, -1, -1, 28, -1, -1, 81, -1, 22}, {-1, -1, -1, -1, 61, 17, 39, 21, -1}}))
}
