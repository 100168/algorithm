package main

/*
1864. 构成交替字符串需要的最小交换次数
中等
相关标签
相关企业
提示
给你一个二进制字符串 s ，现需要将其转化为一个 交替字符串 。请你计算并返回转化所需的 最小 字符交换次数，如果无法完成转化，返回 -1 。

交替字符串 是指：相邻字符之间不存在相等情况的字符串。例如，字符串 "010" 和 "1010" 属于交替字符串，但 "0100" 不是。

任意两个字符都可以进行交换，不必相邻 。

示例 1：

输入：s = "111000"
输出：1
解释：交换位置 1 和 4："111000" -> "101010" ，字符串变为交替字符串。
示例 2：

输入：s = "010"
输出：0
解释：字符串已经是交替字符串了，不需要交换。
示例 3：

输入：s = "1110"
输出：-1
*/
func minSwaps(s string) int {

	n := len(s)
	cnt := 0
	for _, v := range s {
		if v == '1' {
			cnt++
		} else {
			cnt--
		}
	}
	if cnt >= 2 || cnt <= -2 {
		return -1
	}
	ans1 := 0
	ans0 := 0
	for i := 0; i < n; i++ {
		if i&1 == 0 && s[i] == '0' {
			ans1++
		}
		if i&1 == 0 && s[i] == '1' {
			ans0++
		}
	}
	if cnt == 0 {
		return min(ans1, ans0)
	}
	if cnt > 0 {
		return ans1
	}
	return ans0

}

func main() {
	minSwaps("1110001010101010101010101010110011100011001100")
}
