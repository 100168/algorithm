Index: src/easy/isValid.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"fmt\"\n)\n\n/*有效括号*/\nfunc isValid(s string) bool {\n\n\tn := len(s)\n\tif n%2 != 0 {\n\t\treturn false\n\t}\n\n\tpairs := map[byte]byte{\n\t\t'(': ')',\n\t\t'{': '}',\n\t\t'[': ']',\n\t}\n\n\tvar stack []byte\n\n\tfor i := 0; i < n; i++ {\n\t\tif len(stack) == 0 {\n\t\t\tstack = append(stack, s[i])\n\t\t} else if pairs[s[i]] == 0 {\n\t\t\tif pairs[stack[len(stack)-1]] != s[i] {\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tstack = stack[:len(stack)-1]\n\t\t\t}\n\t\t} else {\n\t\t\tstack = append(stack, s[i])\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\nfunc main() {\n\tpairs := map[int]int{\n\t\t1: 1,\n\t\t2: 2,\n\t\t3: 3,\n\t}\n\tfmt.Println(pairs[1])\n\n\tisValid(\"()\")\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/easy/isValid.go b/src/easy/isValid.go
--- a/src/easy/isValid.go	(revision 083c359377cc95d78ed45a5e844f5d46aa6b277b)
+++ b/src/easy/isValid.go	(date 1663135684625)
@@ -41,8 +41,11 @@
 		2: 2,
 		3: 3,
 	}
+
 	fmt.Println(pairs[1])
 
+	fmt.Println(pairs[4])
+
 	isValid("()")
 
 }
Index: src/hard/problem_239_maxSlidingWindow.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport \"fmt\"\n\n/*\n给你一个整数数组 nums，有一个大小为k的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k个数字。滑动窗口每次只向右移动一位。\n\n返回滑动窗口中的最大值。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/sliding-window-maximum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/\n\n//单调队列，加滑动窗口\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tleft := 0\n\tright := 0\n\tn := len(nums)\n\n\tvar stack []int\n\tvar ans []int\n\tfor right < n {\n\t\tif k > 0 {\n\t\t\tfor len(stack) > 0 && nums[right] > stack[len(stack)-1] {\n\t\t\t\tstack = stack[:len(stack)-1]\n\t\t\t}\n\t\t\tstack = append(stack, nums[right])\n\t\t\tright++\n\t\t\tk--\n\t\t}\n\t\tif k == 0 {\n\t\t\tans = append(ans, stack[0])\n\t\t\tif nums[left] == stack[0] {\n\t\t\t\tstack = stack[1:]\n\t\t\t}\n\t\t\tleft++\n\t\t\tk++\n\t\t}\n\t}\n\n\treturn ans\n}\n\nfunc maxSlidingWindow2(nums []int, k int) []int {\n\tvar q []int\n\tpush := func(i int) {\n\t\tfor len(q) > 0 && nums[i] >= nums[q[len(q)-1]] {\n\t\t\tq = q[:len(q)-1]\n\t\t}\n\t\tq = append(q, i)\n\t}\n\n\tfor i := 0; i < k; i++ {\n\t\tpush(i)\n\t}\n\n\tn := len(nums)\n\tans := make([]int, 1, n-k+1)\n\tans[0] = nums[q[0]]\n\tfor i := k; i < n; i++ {\n\t\tpush(i)\n\t\tfor q[0] <= i-k {\n\t\t\tq = q[1:]\n\t\t}\n\t\tans = append(ans, nums[q[0]])\n\t}\n\treturn ans\n}\nfunc main() {\n\ta := []int{1, 3, -1, -3, 5, 3, 6, 7, 23, 3, 4, 3, 234, 24, 453, 3, 3, 23, 4, 45, 45, 56, 5, 4, 454, 65, 7}\n\n\twindow := maxSlidingWindow(a, 3)\n\tfmt.Println(window)\n\n\twindow = maxSlidingWindow2(a, 3)\n\tfmt.Println(window)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hard/problem_239_maxSlidingWindow.go b/src/hard/problem_239_maxSlidingWindow.go
--- a/src/hard/problem_239_maxSlidingWindow.go	(revision 083c359377cc95d78ed45a5e844f5d46aa6b277b)
+++ b/src/hard/problem_239_maxSlidingWindow.go	(date 1663134998193)
@@ -74,4 +74,5 @@
 
 	window = maxSlidingWindow2(a, 3)
 	fmt.Println(window)
+
 }
Index: src/struct/restocking.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/struct/restocking.go b/src/struct/restocking.go
new file mode 100644
--- /dev/null	(date 1668993728561)
+++ b/src/struct/restocking.go	(date 1668993728561)
@@ -0,0 +1,33 @@
+package _struct
+
+// Store /**商店id和商店补货日*/
+type Store struct {
+	id string
+	//到货提前日
+	daysInAdvanceOfArrival int
+	//补货日列表
+	restockDays []RestockDay
+}
+
+type OrderDay struct {
+	//下单日期
+	days []int
+	//状态
+	status OrderStatus
+}
+type RestockDay struct {
+	day int
+	//提前期
+	daysInAdvance int
+}
+
+type OrderStatus int
+
+const (
+	Open OrderStatus = iota
+	Closed
+)
+
+func calculateRestockDay(stores Store, orderDay OrderDay) {
+
+}
Index: src/hard/problem_1713_minOperations.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hard/problem_1713_minOperations.go b/src/hard/problem_1713_minOperations.go
new file mode 100644
--- /dev/null	(date 1663144128939)
+++ b/src/hard/problem_1713_minOperations.go	(date 1663144128939)
@@ -0,0 +1,49 @@
+package main
+
+func minOperations(target []int, arr []int) int {
+
+	indexMap := make(map[int]int)
+
+	for i, v := range target {
+
+		indexMap[v] = i
+
+	}
+	se := make([]int, 0)
+
+	for _, v := range arr {
+
+		a, ok := indexMap[v]
+		if ok {
+			if len(se) == 0 || se[len(se)-1] < a {
+				se = append(se, a)
+			} else {
+				index := find(se, a)
+				se[index] = a
+			}
+		}
+	}
+
+	return len(target) - len(se)
+
+}
+
+func find(arr []int, target int) int {
+
+	l := 0
+	r := len(arr)
+
+	for l < r {
+
+		m := l + r>>1
+		if arr[m] >= target {
+
+			r = m
+		} else {
+			l = m + 1
+		}
+	}
+
+	return l
+
+}
Index: src/hard/problem_1439_kthSmallest.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hard/problem_1439_kthSmallest.go b/src/hard/problem_1439_kthSmallest.go
new file mode 100644
--- /dev/null	(date 1663144935162)
+++ b/src/hard/problem_1439_kthSmallest.go	(date 1663144935162)
@@ -0,0 +1,59 @@
+package main
+
+type Info struct {
+	m   int
+	n   int
+	cnt int
+	k   int
+	mat [][]int
+}
+
+func kthSmallest(mat [][]int, k int) int {
+
+	m := len(mat)
+	n := len(mat[0])
+	l := 0
+	r := 0
+
+	for i := 0; i < m; i++ {
+		l += mat[i][0]
+		r += mat[i][n-1]
+	}
+	var info *Info
+	info = new(Info)
+	info.k = k
+	info.mat = mat
+	info.n = n
+	info.m = m
+	for l < r {
+
+		mid := (r + l) >> 1
+		info.cnt = 1
+		dfs(info, mid, 0, l)
+
+		if info.cnt >= k {
+			r = mid
+		} else {
+			l = mid + 1
+		}
+
+	}
+	return l
+}
+
+func dfs(info *Info, mid int, row int, sum int) {
+
+	if row == info.m || info.cnt >= info.k {
+		return
+	}
+	dfs(info, mid, row+1, sum)
+	for i := 1; i < info.n; i++ {
+		val := sum + info.mat[row][i] - info.mat[row][i-1]
+		if val > mid {
+			break
+		}
+		info.cnt++
+		dfs(info, mid, row+1, val)
+
+	}
+}
Index: src/dp/problem_1671_minimumMountainRemovals.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dp/problem_1671_minimumMountainRemovals.go b/src/dp/problem_1671_minimumMountainRemovals.go
new file mode 100644
--- /dev/null	(date 1663134470133)
+++ b/src/dp/problem_1671_minimumMountainRemovals.go	(date 1663134470133)
@@ -0,0 +1,52 @@
+package main
+
+func minimumMountainRemovals(nums []int) int {
+
+	n := len(nums)
+	maxLeft := getMaxLen(nums, 0, n, 1)
+	maxRight := getMaxLen(nums, n-1, -1, -1)
+	ans := n
+	for i := 0; i < n; i++ {
+		if maxLeft[i] > 1 && maxRight[i] > 1 {
+			if n-maxLeft[i]-maxRight[i]+1 < ans {
+				ans = n - maxLeft[i] - maxRight[i] + 1
+			}
+		}
+	}
+	return ans
+
+}
+
+func getMaxLen(nums []int, start int, end int, add int) []int {
+	n := len(nums)
+	maxLen := make([]int, n)
+	maxItem := make([]int, n)
+
+	le := 0
+
+	for i := start; i != end; i += add {
+		if le == 0 || nums[i] > maxItem[le-1] {
+			maxItem[le] = nums[i]
+			le++
+			maxLen[i] = le
+		} else {
+			l := 0
+			r := le - 1
+			for l < r {
+				m := l + r>>1
+				if nums[i] > maxItem[m] {
+					r = m
+				} else {
+					l = m + 1
+				}
+			}
+
+			maxLen[i] = l + 1
+			maxItem[l] = nums[i]
+
+		}
+	}
+
+	return maxLen
+
+}
Index: src/hard/problem_4_findMedianSortedArrays.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hard/problem_4_findMedianSortedArrays.go b/src/hard/problem_4_findMedianSortedArrays.go
new file mode 100644
--- /dev/null	(date 1663568938440)
+++ b/src/hard/problem_4_findMedianSortedArrays.go	(date 1663568938440)
@@ -0,0 +1,96 @@
+package main
+
+import "fmt"
+
+func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
+
+	l1 := len(nums1)
+	l2 := len(nums2)
+	//true 为偶数
+	even := (l1+l2)&1 == 0
+
+	mid := (l1 + l2) >> 1
+	if l1 > 0 && l2 > 0 {
+		find1 := findK(nums1, nums2, mid+1)
+		if even {
+			find2 := findK(nums1, nums2, mid)
+			return (float64(find1) + float64(find2)) * 0.5
+		}
+		return float64(find1)
+	} else if l1 != 0 {
+		if even {
+			return (float64(nums1[mid-1]) + float64(nums1[mid])) * 0.5
+		}
+		return float64(nums1[mid-1])
+	} else {
+		if even {
+			return (float64(nums2[mid-1]) + float64(nums2[mid])) * 0.5
+		}
+		return float64(nums2[mid-1])
+	}
+}
+
+func findK(nums1 []int, nums2 []int, k int) int {
+
+	var longest []int
+	var shortest []int
+	l1 := len(nums1)
+	l2 := len(nums2)
+
+	if l1 > l2 {
+		longest = nums1
+		shortest = nums2
+	} else {
+		longest = nums2
+		shortest = nums1
+	}
+	s := len(shortest)
+	l := len(longest)
+
+	if k <= s {
+		return getUpMedium(shortest, 0, k-1, longest, 0, k-1)
+	} else if k > l {
+
+		if longest[k-s-1] >= shortest[s-1] {
+			return longest[k-s-1]
+		}
+		if shortest[k-l-1] >= longest[l-1] {
+			return shortest[k-l-1]
+		}
+		//?为啥是这样取？因为前k-l个数不要
+		return getUpMedium(shortest, k-l, s-1, longest, k-s, l-1)
+	}
+
+	if longest[k-s-1] > shortest[s-1] {
+		return longest[k-s-1]
+	}
+	return getUpMedium(shortest, 0, s-1, longest, k-s, k-1)
+}
+
+func getUpMedium(shortest []int, s1 int, e1 int, longest []int, s2 int, e2 int) int {
+	for s1 < e1 {
+		mid1 := (s1 + e1) >> 1
+		mid2 := (s2 + e2) >> 1
+		offset := ((e1 - s1 + 1) & 1) ^ 1
+		if shortest[mid1] == longest[mid2] {
+			return shortest[mid1]
+		} else if shortest[mid1] > longest[mid2] {
+			e1 = mid1
+			s2 = mid2 + offset
+		} else {
+			s1 = mid1 + offset
+			e2 = mid2
+		}
+	}
+	if shortest[s1] > longest[s2] {
+		return longest[s2]
+	}
+	return shortest[s1]
+}
+
+func main() {
+	nums1 := []int{1}
+	nums2 := []int{1}
+	val := findMedianSortedArrays(nums1, nums2)
+	fmt.Println(val)
+}
Index: src/hard/problem_644_findMaxAverage.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hard/problem_644_findMaxAverage.go b/src/hard/problem_644_findMaxAverage.go
new file mode 100644
--- /dev/null	(date 1663753681081)
+++ b/src/hard/problem_644_findMaxAverage.go	(date 1663753681081)
@@ -0,0 +1,61 @@
+package main
+
+import "math"
+
+func findMaxAverage(nums []int, k int) float64 {
+
+	left := math.MaxFloat64
+	right := float64(0)
+
+	for _, v := range nums {
+		if float64(v) < left {
+			left = float64(v)
+		}
+		if float64(v) > right {
+			right = float64(v)
+		}
+	}
+
+	for right-left > 0.00001 {
+		mid := (left + right) * 0.5
+
+		if check(mid, nums, k) {
+			left = mid
+		} else {
+			right = mid
+		}
+
+	}
+
+	return left
+
+}
+
+func check(mid float64, nums []int, k int) bool {
+	sum := float64(0)
+	pre := float64(0)
+	minSum := math.MaxFloat64
+
+	for i := 0; i < k; i++ {
+		sum += float64(nums[i]) - mid
+	}
+
+	if sum >= float64(0) {
+		return true
+	}
+
+	for i := k; i < len(nums); i++ {
+		sum += float64(nums[i]) - mid
+		pre += float64(nums[i-k]) - mid
+
+		if pre < minSum {
+			minSum = pre
+		}
+
+		if sum-minSum >= float64(0) {
+			return true
+		}
+	}
+
+	return false
+}
